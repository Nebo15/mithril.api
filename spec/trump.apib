FORMAT: 1A
HOST: https://trump.herokuapp.com/

# Trump

Trump â€“ Auth & Role management system

Trump is known fo:

1. implementing OAuth2 flow (e.g. issuing tokens),
2. token verification service,
3. role management.

Trump consists of two main parts:

- [REST API back-end](https://github.com/Nebo15/trump.api),
- [Management UI](https://github.com/Nebo15/trump.web).

## Use Cases

- Issuing / revoking OAuth2 tokens,
- Answering a question "can a given token request a service?",
- Managing users / tokens / clients / user roles.

## Tokens [/tokens]

### Get a token [GET /tokens{id}]

+ Request (application/json)

    + Headers

            Authentication: Bearer <token_value>

+ Response 200 (application/json)

    + Attributes

        + meta

            + code: 200 (number)

        + data (Token)

### Create a token [POST]

+ Request (application/json)

    + Attributes

        + One of

            + token (object)

                + `grant_type`: `authorization_code` (string, fixed)
                + client_id (string, required)
                + client_secret (string, required)
                + redirect_uri (string, required)
                + code (string, required)

            + token (object)

                + `grant_type`: `client_credentials` (string, fixed)
                + client_id (string, required)
                + client_secret (string, required)

            + token (object)

                + `grant_type`: `password` (string, fixed)
                + client_id (string, required)
                + email (string, required)
                + password (string, required)
                + scope (string, required)

            + token (object)

                + `grant_type`: `refresh_token` (string, fixed)
                + client_id (string, required)
                + client_secret (string, required)
                + refresh_token (string, required)

+ Response 201 (application/json)

    + Attributes

        + meta

            + code: 201 (number)

        + data (Token)

## Apps [/apps]

### Get apps [GET /apps]

+ Request (application/json)

    + Headers

            Authentication: Bearer <token_value>

+ Response 200 (application/json)

    + Attributes

        + meta

            + code: 200 (number)

        + data (array[App])

### Get app [GET /apps{id}]

+ Request (application/json)

    + Headers

            Authentication: Bearer <token_value>

+ Response 200 (application/json)

    + Attributes

        + meta

            + code: 200 (number)

        + data (App)

### Authorize an app [POST /apps/authorize]

+ Request (application/json)

    + Attributes

        + client_id (string)
        + redirect_uri (string)
        + scope (string)

+ Response 201 (application/json)

    + Attributes

        + meta

            + code: 201 (number)

        + data (Token)

### De-authorize an app [DELETE /apps/{id}]

+ Request (application/json)

    + Headers

            Authentication: Bearer <token_value>

+ Response 204 (application/json)

    + Attributes

        + meta

            + code: 204 (number)

        + data (object)

## Users [/users]

### Register a user [POST /users/register]

+ Request (application/json)

    + Attributes

        + user (object)

            + email (string)
            + password (string)

+ Response 201 (application/json)

  + Attributes

        + meta

            + code: 201 (number)

        + data (User)

### Login a user [POST /users/login]

+ Request (application/json)

    + Attributes

        + user (object)

            + email (string)
            + password (string)

+ Response 201 (application/json)

    + Headers

            Cookies: SessionID

    + Attributes

        + meta

            + code: 201 (number)

        + data (User)

### Logout a user [DELETE /users/logout]

+ Request (application/json)

    + Headers

            Cookies: SessionID

    + Attributes

        + user (object)

            + email (string)
            + password (string)

+ Response 201 (application/json)

    + Attributes

        + meta

            + code: 201 (number)

        + data (User)

### Get user data [GET /users/me]

+ Request (application/json)

    + Headers

            Cookies: SessionID

+ Response 200 (application/json)

    + Attributes

        + meta

            + code: 201 (number)

        + data (User)

### Confirm user [GET /users/confirm]

+ Request (application/json)

    + Attributes

        + confirmation_token (string)

+ Response 200 (application/json)

    + Attributes

        + meta

            + code: 200 (number)

        + data (User)

### Recover password [GET /users/recover_password]

+ Request (application/json)

    + Attributes

        + user (object)

            + email (string)

+ Response 201 (application/json)

    + Headers

            Cookies: SessionID

    + Attributes

        + meta

            + code: 201 (number)

        + data (object)

### Reset password [GET /users/reset_password]

+ Request (application/json)

    + Attributes

        + user (object)

            + password (string)
            + reset_token (string)

+ Response 200 (application/json)

    + Attributes

        + meta

            + code: 200 (number)

        + data (object)

            + message: Password updated! (string)

### Change password [GET /users/change_password]

+ Request (application/json)

    + Attributes

        + user (object)

            + password (string)
            + old_password (string)

+ Response 200 (application/json)

    + Attributes

        + meta

            + code: 200 (number)

        + data (object)

            + message: Password updated! (string)

## Admin: Roles [/admin/roles]

### Get roles [GET /admin/roles]

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes

        + meta

            + code: 200 (number)

        + data (array[Role])

### Get role [GET /admin/roles/{id}]

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes

        + meta

            + code: 200 (number)

        + data (Role)

### Create role [POST /admin/roles]

+ Request (application/json)

    + Attributes

        + role (object)

            + name (string)
            + scopes (string)

+ Response 200 (application/json)

    + Attributes

        + meta

            + code: 200 (number)

        + data (Role)

### Update role [PATCH /admin/roles/{id}]

+ Request (application/json)

    + Attributes

        + role (object)

            + name (string)
            + scopes (string)

+ Response 200 (application/json)

    + Attributes

        + meta

            + code: 200 (number)

        + data (Role)

### Delete role [DELETE /admin/roles/{id}]

+ Request (application/json)

+ Response 204 (application/json)

    + Attributes

        + meta

            + code: 204 (number)

        + data (object)

## Admin: Client types [/admin/client_types]

### Get client types [GET /admin/client_types]

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes

        + meta

            + code: 200 (number)

        + data (array[Client Type])

### Get client type [GET /admin/client_types/{id}]

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes

        + meta

            + code: 200 (number)

        + data (Client Type)

### Create client type [POST /admin/client_types]

+ Request (application/json)

    + Attributes

        + client_type (object)

            + name (string)
            + scopes (string)

+ Response 201 (application/json)

    + Attributes

        + meta

            + code: 201 (number)

        + data (Client Type)

### Update client type [PATCH /admin/client_types/{id}]

+ Request (application/json)

    + Attributes

        + client_type (object)

            + name (string)
            + scopes (string)

+ Response 200 (application/json)

    + Attributes

        + meta

            + code: 200 (number)

        + data (Client Type)

### Delete client type [DELETE /admin/client_types/{id}]

+ Request (application/json)

+ Response 204 (application/json)

    + Attributes

        + meta

            + code: 204 (number)

        + data (object)

## Admin: Tokens [/admin/tokens]

### Get tokens [GET /admin/tokens]

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes

        + meta

            + code: 200 (number)

        + data (array[Token])

### Get token [GET /admin/tokens/{id}]

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes

        + meta

            + code: 200 (number)

        + data (Token)

### Create token [POST /admin/tokens]

+ Request (application/json)

    + Attributes

        + token (object)

            + name (string)
            + scopes (string)

+ Response 200 (application/json)

    + Attributes

        + meta

            + code: 200 (number)

        + data (Token)

### Update token [PATCH /admin/tokens/{id}]

+ Request (application/json)

    + Attributes

        + token (object)

            + name (string)
            + scopes (string)

+ Response 200 (application/json)

    + Attributes

        + meta

            + code: 200 (number)

        + data (Token)

### Delete token [DELETE /admin/tokens/{id}]

+ Request (application/json)

+ Response 204 (application/json)

    + Attributes

        + meta

            + code: 204 (number)

        + data (object)

## Admin: Users [/admin/users]

### Get users [GET /admin/users]

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes

        + meta

            + code: 200 (number)

        + data (array[User])

### Get user [GET /admin/users/{id}]

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes

        + meta

            + code: 200 (number)

        + data (User)

### Create user [POST /admin/users]

+ Request (application/json)

    + Attributes

        + user (object)

            + name (string)
            + scopes (string)

+ Response 200 (application/json)

    + Attributes

        + meta

            + code: 200 (number)

        + data (User)

### Update user [PATCH /admin/users/{id}]

+ Request (application/json)

    + Attributes

        + user (object)

            + name (string)
            + scopes (string)

+ Response 200 (application/json)

    + Attributes

        + meta

            + code: 200 (number)

        + data (User)

### Delete user [DELETE /admin/users/{id}]

+ Request (application/json)

+ Response 204 (application/json)

    + Attributes

        + meta

            + code: 204 (number)

        + data (object)

## Admin: Clients [/admin/clients]

### Get clients [GET /admin/clients]

+ Request (application/json)

    + Headers

            Authentication: Bearer <token_value>

+ Response 200 (application/json)

    + Attributes

        + meta

            + code: 200 (number)

        + data (array[Client])

### Get client [GET /admin/client/{id}]

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes

        + meta

            + code: 200 (number)

        + data (Client)

### Create a client [POST /admin/clients]

+ Request (application/json)

    + Attributes

        + client (object)

            + name (string)
            + secret (string)
            + redirect_uri (string)
            + settings (object)
            + priv_settings (object)

+ Response 201 (application/json)

    + Attributes

        + meta

            + code: 201 (number)

        + data (Client)

### Delete a client [DELETE /admin/clients/{id}]

+ Request (application/json)

    + Headers

            Authentication: Bearer <token_value>

+ Response 204 (application/json)

    + Attributes

        + meta

            + code: 204 (number)

        + data (object)

# Data Structures

## Token (object)

+ id (string) - internal token ID, a UUID string
+ name (string) - name of token
+ value (string) - value of token
+ expires_at (string) - the datetime in ISO8601 format
+ details (object) - some token specifics
+ user_id (number) - ID of token bearer

## App (object)

+ id (string) - internal app ID, a UUID string
+ user_id (string) - internal user ID, a UUID string
+ client_id (string) - internal client ID, a UUID string
+ scope (string) - scope, in a coma-delimited format

## Client (object)

+ id (string) - internal client ID, a UUID string
+ name (string) - client name
+ secret (string) - client secret
+ redirect_uri (string) - client redirect url
+ settings (object) - client settings
+ priv_settings (object) - client private settings
+ user_id - owner-user internal ID, a UUID string

## User (object)

+ id (string) - internal user ID, a UUID string
+ email (string) - user email
+ password (string) - user password
+ settings (object) - user settings
+ priv_settings (object) - user priv settings

## Role (object)

+ id (string) - internal role ID, a UUID string
+ name (string) - role title
+ scopes (string) - list of scopes, coma-separated

## Client Type (object)

+ id (string) - internal client type ID, a UUID string
+ name (string) - client type title
+ scopes (string) - list of scopes, coma-separated
