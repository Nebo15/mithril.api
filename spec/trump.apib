FORMAT: 1A
HOST: https://trump.herokuapp.com/

# Trump

Trump -  â€“ Auth & Role management system

Trump is known fo:

1. implementing OAuth2 flow (e.g. issuing tokens),
2. token verification service,
3. role management.

Trump consists of two main parts:

- [REST API back-end](https://github.com/Nebo15/trump.api),
- [Management UI](https://github.com/Nebo15/trump.web).

## Use Cases

- Issuing / revoking OAuth2 tokens,
- Answering a question "can a given token request a service?",
- Managing users / tokens / clients / user roles.

## Tokens [/tokens]

### Get a token [GET /tokens{id}]

+ Request (application/json)

    + Headers

            Authentication: Bearer <token_value>

+ Response 200 (application/json)

    + Attributes

        + meta

            + code: 200 (number)

        + data (Token)

### Create a token [POST]

+ Request (application/json)

    + Attributes

        + One of

            + token (object)

                + `grant_type`: `authorization_code` (string, fixed)
                + client_id (string, required)
                + client_secret (string, required)
                + redirect_uri (string, required)
                + code (string, required)

            + token (object)

                + `grant_type`: `client_credentials` (string, fixed)
                + client_id (string, required)
                + client_secret (string, required)

            + token (object)

                + `grant_type`: `password` (string, fixed)
                + client_id (string, required)
                + email (string, required)
                + password (string, required)
                + scope (string, required)

            + token (object)

                + `grant_type`: `refresh_token` (string, fixed)
                + client_id (string, required)
                + client_secret (string, required)
                + refresh_token (string, required)

+ Response 201 (application/json)

    + Attributes

        + meta

            + code: 201 (number)

        + data (Token)

## Apps [/apps]

### Get apps [GET /apps]

+ Request (application/json)

    + Headers

            Authentication: Bearer <token_value>

+ Response 200 (application/json)

    + Attributes

        + meta

            + code: 200 (number)

        + data (array[App])

### Get app [GET /apps{id}]

+ Request (application/json)

    + Headers

            Authentication: Bearer <token_value>

+ Response 200 (application/json)

    + Attributes

        + meta

            + code: 200 (number)

        + data (App)

### Authorize an app [GET /apps/authorize]

+ Request (application/json)

    + Attributes

        + client_id (string)
        + redirect_uri (string)
        + scope (string)

+ Response 201 (application/json)

    + Attributes

        + meta

            + code: 201 (number)

        + data (Token)

### De-authorize an app [DELETE /apps/{id}]

+ Request (application/json)

    + Headers

            Authentication: Bearer <token_value>

+ Response 204 (application/json)

    + Attributes

        + meta

            + code: 204 (number)

        + data (object)

## Clients [/clients]

### Get clients [GET /clients]

+ Request (application/json)

    + Headers

            Authentication: Bearer <token_value>

+ Response 200 (application/json)

    + Attributes

        + meta

            + code: 200 (number)

        + data (array[Client])

### Get client [GET /client/{id}]

+ Request (application/json)

    + Headers

            Authentication: Bearer <token_value>

+ Response 200 (application/json)

    + Attributes

        + meta

            + code: 200 (number)

        + data (Client)

### Create a client [POST /clients]

+ Request (application/json)

    + Headers

            Authentication: Bearer <token_value>

    + Attributes

        + client (object)

            + name (string)
            + secret (string)
            + redirect_uri (string)
            + settings (object)
            + priv_settings (object)

+ Response 201 (application/json)

    + Attributes

        + meta

            + code: 201 (number)

        + data (Client)

### Delete a client [DELETE /clients/{id}]

+ Request (application/json)

    + Headers

            Authentication: Bearer <token_value>

+ Response 204 (application/json)

    + Attributes

        + meta

            + code: 204 (number)

        + data (object)

# Data Structures

## Token (object)

+ id (string) - internal token ID
+ name (string) - name of token
+ value (string) - value of token
+ expires_at (string) - the datetime in ISO8601 format
+ details (object) - some token specifics
+ user_id (number) - ID of token bearer

## App (object)

+ id (string) - internal app ID, a UUID string
+ user_id (string) - internal user ID, a UUID string
+ client_id (string) - internal client ID, a UUID string
+ scope (string) - scope, in a coma-delimited format

## Client (object)

+ id (string) - internal client ID, a UUID string
+ name (string) - client name
+ secret (string) - client secret
+ redirect_uri (string) - client redirect url
+ settings (object) - client settings
+ priv_settings (object) - client private settings
+ user_id - owner-user internal ID, a UUID string
